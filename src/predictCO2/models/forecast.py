"""
Author: Sreetama Sarkar
Date: 7/9/2020
"""

import os
import sys
import json
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.ticker import FixedLocator, FormatStrFormatter
from tensorflow import keras

import Globals
import predictCO2.preprocessing.utils as utils
from src.predictCO2.preprocessing import generate_data
from matplotlib.ticker import ScalarFormatter, FormatStrFormatter

def soft_accuracy(y_true, y_pred, tolerance= 20e-5):
    return np.mean(np.abs(y_true - y_pred) <= tolerance)

def plot_series(fig, dates, series, title, format="-", start=0, end=None):
    """ Visualize the CO2 data as a time series"""

    ax = fig.add_subplot(111)
    ax.plot(dates[start:end], series[start:end], format)
    # plt.xticks(time[start:end], dates[start:end])
    ax.xaxis.set_major_locator(FixedLocator(range(start, end, 20)))
    plt.xlabel("Time")
    plt.ylabel("Value")
    plt.title(title)
    plt.grid(True)
    # plt.savefig(fir_dir + '/' + fig_name)


def train_test_split_data(time, series, validation_split):
    """ Split data into train and validation sets"""

    split_time = round(len(series) * (1 - validation_split))
    time_train = time[:split_time]
    x_train = series[:split_time]
    time_valid = time[split_time:]
    x_valid = series[split_time:]
    return time_train, x_train, time_valid, x_valid, split_time


def naive_forecast(series, split_time):
    """Naive Forecasting is an Estimating technique in which the last period's actuals are used as this period's
    forecast. It is used only for comparison with the forecasts generated by the better (sophisticated) techniques"""

    n_forecast = series[split_time - 1:-1]
    return n_forecast


def moving_average_forecast(series, window_size):
    """Forecasts the mean of the last few values.
     If window_size=1, then this is equivalent to naive forecast"""

    forecast = []
    for time in range(len(series) - window_size):
        forecast.append(series[time:time + window_size].mean())
    return np.array(forecast)


def log_stats(country, n_mse, n_mae, m_mse, m_mae, path = './forecast_logs'):
    if os.path.isdir(path):
        pass
    else:
        os.mkdir(path)
    f = open(path + '/' + country + '_forecast_stats.txt', 'w')
    f.write('Naive Forecast: \n')
    f.write('MSE: {}\n'.format(n_mse))
    f.write('MAE: {}\n'.format(n_mae))
    f.write('\nMoving Average Forecast: \n')
    f.write('MSE: {}\n'.format(m_mse))
    f.write('MAE: {}\n'.format(m_mae))


def main():
    # Load configuration file
    if len(sys.argv) != 2:
        print("Cannot find Config file!")
        sys.exit(1)
    else:
        config_path = sys.argv[1:][0]

    with open(config_path, 'r') as jsonfile:
        config = json.load(jsonfile)

    # Get values from configuration file
    config_file = config["config_file"]
    countries = config["countries"]
    validation_split = config["validation_split"]
    visualize_countrywise_co2_data = config["visualize_countrywise_co2_data"]
    visualize_countrywise_co2_train_data = config["visualize_countrywise_co2_train_data"]
    visualize_countrywise_co2_test_data = config["visualize_countrywise_co2_test_data"]
    visualize_moving_average_forecast = config["visualize_moving_average_forecast"]
    log_countrywise_stats = config["log_countrywise_stats"]

    # Get CO2 values as time_series data
    data_type = generate_data.DataType.PANDAS_DF
    mse_total = 0
    mae_total = 0
    mavg_mse_total = 0
    mavg_mae_total = 0
    n_acc_total = 0
    mavg_acc_total = 0

    for country in countries:
        data = generate_data.CountryPolicyCarbonData(config_file, country)
        data = data.get_labels(data_type)
        co2 = data.iloc[0]
        dates = data.columns
        time = range(len(co2))

        # Visualize CO2 data as a time series for the given country
        if visualize_countrywise_co2_data:
            fig = plt.figure(figsize=(10, 6))
            title = 'CO2 Data '+country
            plot_series(fig, dates, co2, title=title, format="-", start=0, end=len(co2))
            plt.show()

        # Divide data into train and test sets
        date_train, x_train, date_valid, x_valid, split_time = train_test_split_data(dates, co2, validation_split)

        # Visualize train data
        if visualize_countrywise_co2_train_data:
            fig = plt.figure(figsize=(10, 6))
            title = 'CO2 Train Data '+country
            plot_series(fig, date_train, x_train, title, format="-", start=0, end=len(x_train))
            plt.show()

        # Visualize validation data
        if visualize_countrywise_co2_test_data:
            fig = plt.figure(figsize=(10, 6))
            title = 'CO2 Validation Data ' + country
            plot_series(fig, date_valid, x_valid, title, format="-", start=0, end=len(x_valid))
            plt.show()

        # Naive forecast
        n_forecast = naive_forecast(co2, split_time)
        n_forecast_mse = keras.metrics.mean_squared_error(x_valid, n_forecast).numpy()
        n_forecast_mae = keras.metrics.mean_absolute_error(x_valid, n_forecast).numpy()
        n_forecast_soft_acc = soft_accuracy(x_valid, n_forecast)
        mse_total += n_forecast_mse
        mae_total += n_forecast_mae
        n_acc_total += n_forecast_soft_acc

        # Moving average forecast
        window_size = config["window_sz"]
        moving_avg = moving_average_forecast(co2, window_size)[split_time - window_size:]
        mavg_forecast_mse = keras.metrics.mean_squared_error(x_valid, moving_avg).numpy()
        mavg_forecast_mae = keras.metrics.mean_absolute_error(x_valid, moving_avg).numpy()
        mavg_forecast_soft_acc = soft_accuracy(x_valid, moving_avg)
        mavg_mse_total += mavg_forecast_mse
        mavg_mae_total += mavg_forecast_mae
        mavg_acc_total += mavg_forecast_soft_acc

        # Visualize moving average forecast
        if visualize_moving_average_forecast:
            fig = plt.figure(figsize=(10, 6))
            title = 'CO2 Actual vs Moving Average ' + country
            plot_series(fig, date_valid, x_valid, title, format="-", start=0, end=len(x_valid))
            plot_series(fig, date_valid, moving_avg, title, format="r-", start=0, end=len(x_valid))
            plt.show()

        # Log the forecast stats
        if log_countrywise_stats:
            path = config["output_dir"]
            log_stats(country, n_forecast_mse, n_forecast_mae, mavg_forecast_mse, mavg_forecast_mae, path)

    print("Mean squared error for naive forecast = {}".format(mse_total/len(countries)))
    print("Mean absolute error for naive forecast = {}".format(mae_total/len(countries)))
    print("Mean squared error for moving average forecast = {}".format(mavg_mse_total/len(countries)))
    print("Mean absolute error for moving average forecast = {}".format(mavg_mae_total/len(countries)))
    print("Soft accuracy for naive forecast = {}".format(n_acc_total/len(countries)))
    print("Soft accuracy for moving average forecast = {}".format(mavg_acc_total/len(countries)))

if __name__ == "__main__":
    main()